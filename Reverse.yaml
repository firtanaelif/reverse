# A turing machine for reversing a string
# Here the states are q0, q1, q2, q3, q4, q5, q6, q7, q8, done
# The symbols are 'a' and 'b'
# alphabet =>{a,b}, we can write any input here
  input: 'aabbab' # output babbaa
  blank: ' '
  # q0 is the machine's start state
  start state: q0
  table:
    q0:
    # As long as we read a or b, move right
    # when reading a blank, move left
    # we have found the end of the input, go to state q1
      a: R 
      b: R
      # The square we are in is the last symbol of the series
      ' ': {L: q1}
    q1:
    # Leave last symbol of input in place: 
    # It is also the first symbol of the reversed string. Move left, and go into state q2
      a: {L: q2}
      b: {L: q2}
    q2:
    # I find the symbol that I will add to the output;
    # If the new symbol is a, go to state q3
    # If the new symbol is b, go to state q4
      ' ': L
      a: {write: 'x', R: q3}
      b: {write: 'x', R: q4}
    q3:
    # I will add symbol "a" to the output. So go to state q6
      'x': R
      a: {R: q6}
      b: {R: q6}
    q4:
     # I will add symbol b to the output. So go to state q7
      'x': R
      a: {R: q7}
      b: {R: q7}
    q5:
    # We use it while scanning in the input to find the next symbol to be added to the output. 
    # The symbol to the left of the last marked symbol will be our next symbol to be added to the output.
      a: L
      b: L
      'x': {L: q8}
    q6:
    # Proceed until you find the end of the output. 
    # Then, add symbol "a" to the output
      a: R
      b: R
      ' ': {write: a, L: q5}
    q7:
    # Proceed until you find the end of the output. Then, add symbol "b" to the output
      a: R
      b: R
      ' ': {write: b, L: q5}
    q8:
    # I mark the symbols added to the output with the "x" symbol.
    # If we have not any symbol a or b is left, that is, if all input is marked (x),
    # I have to finish the program.
      'x': L
      a: {write: 'x', R: q3}
      b: {write: 'x', R: q4}
      ' ': {R: done}
    done:
    # All input elements were placed in the output after necessary operations.
    # As a result of our last operation, we get the final version of our output.
      'x': {write: ' ', R}
      
